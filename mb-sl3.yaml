#####################################################################
#configuration HERE
substitutions:
  name: "mb-sl3"
  #modbus
  slave_id: "4" # slave address
  modbus_baud_rate: "9600"
  modbus_stop_bits: "1"
  modbus_data_bits: "8"
  modbus_parity: "NONE"
  modbus_rx_buffer_size: "1500"
  modbus_direction: "BOTH"
  #ethernet
  eth_ip: "192.168.1.235"
  eth_gateway: "192.168.1.1"
  eth_subnet: "255.255.255.0 "
  #webserver login
  user: youruser
  pass: yourpass
  #I2C address
  i2c_address_in: "0x20"
  i2c_address_out: "0x27"
  i2c_frequency: "400kHz"
#####################################################################
###### MODBUS_MAPS ######
# RELAY
# U2-P0  -->> 11
# U2-P1  -->> 12
# U2-P2  -->> 13
# U2-P3  -->> 14
# U2-P4  -->> 15
# U2-P5  -->> 16
# U2-P6  -->> 17
# U2-P7  -->> 18
# U2-P10 -->> 19
# U2-P11 -->> 20
# U2-P12 -->> 21
# U2-P13 -->> 22
# U2-P14 -->> 23
# U2-P15 -->> 24
# U2-P16 -->> 25
# U2-P17 -->> 26

esphome:
  name: "${name}"

esp32:
  board: esp32dev
  framework:
    type: arduino

external_components:
  - source: github://epiclabs-io/esphome-modbus-server@master
    refresh: 60s
    components:
      - modbus_server
    
ethernet:
  type: LAN8720
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk_mode: GPIO17_OUT
  phy_addr: 0

  # Optional manual IP
  manual_ip:
    static_ip: ${eth_ip}
    gateway: ${eth_gateway}
    subnet: ${eth_subnet} 
 
#wifi:
 # ssid: !secret wifi_ssid
 # password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
 # ap:
 #   ssid: "Gg Fallback Hotspot"
 #   password: "v2qDtauPY7kh"
 # manual_ip:
 #   static_ip: 192.168.1.234
 #   gateway: 192.168.1.1
 #   subnet: 255.255.255.0  
# Enable logging
#captive_portal:
  # Optional manual IP

logger:
#  level: VERBOSE
  logs:
    component: ERROR
api:
  encryption:
    key: "/RcRvhVTmed6+UMvE51VxHSzukCdeGFe+Cek3VZXzeg="
  reboot_timeout: 0s

ota:
  password: "9a99a1c8431cffb4178b15b9fd6852cb"
web_server:
  port: 80
  auth:
    username: ${user}
    password: ${pass}
# Example configuration entry for ESP32
i2c:
  sda: 5
  scl: 16
  scan: true
  id: bus_a
  frequency: ${i2c_frequency}
# Example configuration entry
pcf8574:
  - id: 'pcf8574_hub_out_1'  # for output channel 1-16
    i2c_id: bus_a
    address: ${i2c_address_out}
    pcf8575: true
  - id: 'pcf8574_hub_in_1'  # for input channel 1-16
    i2c_id: bus_a
    address: ${i2c_address_in}
    pcf8575: true

# Enable Home Assistant API
uart:
  - id: intmodbus
    tx_pin: 14
    rx_pin: 13
    baud_rate: ${modbus_baud_rate}
    stop_bits: ${modbus_stop_bits}
    data_bits: ${modbus_data_bits}
    parity: ${modbus_parity}
    rx_buffer_size: ${modbus_rx_buffer_size}
    debug:
      direction: ${modbus_direction}

modbus_server:
  - id: modbuserver
    uart_id: intmodbus
    address: "${slave_id}"# slave address
    holding_registers:
      #- start_address: 79 # starting register range
      #  default: 82 # default value for all those registers
      #  number: 10 # number of registers in the range
      #  on_read: | # called whenever a register in the range is read
      #    // 'address' contains the requested register address
      #    // 'value' contains the stored register value 
      #    ESP_LOGI("ON_READ", "This is a lambda. address=%d, value=%d", address, value);
      #    return value; // you can return the stored value or something else.
      #########
      - start_address: 10 # in this example we map register 10 to a switch
        number: 1
        on_write: |
          if(value){
            id(testswitch)->turn_on();
            id(testswitch).publish_state(true);
            }
          else
          {
            id(testswitch)->turn_off();
            id(testswitch).publish_state(false);
            }
          return value;
        on_read: |
          return id(testswitch)->state ? 1 : 0;
          // Within lambda, get the switch state and conditionally do something
          if (id(testswitch).state) {
           // Switch is ON, do something here
          id(testswitch).publish_state(true);
          } else {
           // Switch is OFF, do something else here
          id(testswitch).publish_state(false);
          }
      ##########
      - start_address: 11 # in this example we map register 11 to a switch
        number: 1
        on_write: |
          if(value){
            id(p0)->turn_on();
            id(p0).publish_state(true);
            }
          else
          {
            id(p0)->turn_off();
            id(p0).publish_state(false);
            }
          return value;
        on_read: |
          return id(p0)->state ? 1 : 0;
          // Within lambda, get the switch state and conditionally do something
          if (id(p0).state) {
           // Switch is ON, do something here
          id(p0).publish_state(true);
          } else {
           // Switch is OFF, do something else here
          id(p0).publish_state(false);
          }
      ########
      ##########
      - start_address: 12 # in this example we map register 12 to a switch
        number: 1
        on_write: |
          if(value){
            id(p1)->turn_on();
            id(p1).publish_state(true);
            }
          else
          {
            id(p1)->turn_off();
            id(p1).publish_state(false);
            }
          return value;
        on_read: |
          return id(p1)->state ? 1 : 0;
          // Within lambda, get the switch state and conditionally do something
          if (id(p1).state) {
           // Switch is ON, do something here
          id(p1).publish_state(true);
          } else {
           // Switch is OFF, do something else here
          id(p1).publish_state(false);
          }
      ########
      ##########
      - start_address: 13 # in this example we map register 13 to a switch
        number: 1
        on_write: |
          if(value){
            id(p2)->turn_on();
            id(p2).publish_state(true);
            }
          else
          {
            id(p2)->turn_off();
            id(p2).publish_state(false);
            }
          return value;
        on_read: |
          return id(p2)->state ? 1 : 0;
          // Within lambda, get the switch state and conditionally do something
          if (id(p2).state) {
           // Switch is ON, do something here
          id(p2).publish_state(true);
          } else {
           // Switch is OFF, do something else here
          id(p2).publish_state(false);
          }
      ########
      ##########
      - start_address: 14 # in this example we map register 14 to a switch
        number: 1
        on_write: |
          if(value){
            id(p3)->turn_on();
            id(p3).publish_state(true);
            }
          else
          {
            id(p3)->turn_off();
            id(p3).publish_state(false);
            }
          return value;
        on_read: |
          return id(p3)->state ? 1 : 0;
          // Within lambda, get the switch state and conditionally do something
          if (id(p3).state) {
           // Switch is ON, do something here
          id(p3).publish_state(true);
          } else {
           // Switch is OFF, do something else here
          id(p3).publish_state(false);
          }
      ########
      ##########
      - start_address: 15 # in this example we map register 15 to a switch
        number: 1
        on_write: |
          if(value){
            id(p4)->turn_on();
            id(p4).publish_state(true);
            }
          else
          {
            id(p4)->turn_off();
            id(p4).publish_state(false);
            }
          return value;
        on_read: |
          return id(p4)->state ? 1 : 0;
          // Within lambda, get the switch state and conditionally do something
          if (id(p4).state) {
           // Switch is ON, do something here
          id(p4).publish_state(true);
          } else {
           // Switch is OFF, do something else here
          id(p4).publish_state(false);
          }
      ########
      ##########
      - start_address: 16 # in this example we map register 16 to a switch
        number: 1
        on_write: |
          if(value){
            id(p5)->turn_on();
            id(p5).publish_state(true);
            }
          else
          {
            id(p5)->turn_off();
            id(p5).publish_state(false);
            }
          return value;
        on_read: |
          return id(p5)->state ? 1 : 0;
          // Within lambda, get the switch state and conditionally do something
          if (id(p5).state) {
           // Switch is ON, do something here
          id(p5).publish_state(true);
          } else {
           // Switch is OFF, do something else here
          id(p5).publish_state(false);
          }
      ########
      ##########
      - start_address: 17 # in this example we map register 17 to a switch
        number: 1
        on_write: |
          if(value){
            id(p6)->turn_on();
            id(p6).publish_state(true);
            }
          else
          {
            id(p6)->turn_off();
            id(p6).publish_state(false);
            }
          return value;
        on_read: |
          return id(p6)->state ? 1 : 0;
          // Within lambda, get the switch state and conditionally do something
          if (id(p6).state) {
           // Switch is ON, do something here
          id(p6).publish_state(true);
          } else {
           // Switch is OFF, do something else here
          id(p6).publish_state(false);
          }
      ########
      ##########
      - start_address: 18 # in this example we map register 18 to a switch
        number: 1
        on_write: |
          if(value){
            id(p7)->turn_on();
            id(p7).publish_state(true);
            }
          else
          {
            id(p7)->turn_off();
            id(p7).publish_state(false);
            }
          return value;
        on_read: |
          return id(p7)->state ? 1 : 0;
          // Within lambda, get the switch state and conditionally do something
          if (id(p7).state) {
           // Switch is ON, do something here
          id(p7).publish_state(true);
          } else {
           // Switch is OFF, do something else here
          id(p7).publish_state(false);
          }
      ########
      ##########
      - start_address: 19 # in this example we map register 19 to a switch
        number: 1
        on_write: |
          if(value){
            id(p10)->turn_on();
            id(p10).publish_state(true);
            }
          else
          {
            id(p10)->turn_off();
            id(p10).publish_state(false);
            }
          return value;
        on_read: |
          return id(p10)->state ? 1 : 0;
          // Within lambda, get the switch state and conditionally do something
          if (id(p10).state) {
           // Switch is ON, do something here
          id(p10).publish_state(true);
          } else {
           // Switch is OFF, do something else here
          id(p10).publish_state(false);
          }
      ########
      ##########
      - start_address: 20 # in this example we map register 20 to a switch
        number: 1
        on_write: |
          if(value){
            id(p11)->turn_on();
            id(p11).publish_state(true);
            }
          else
          {
            id(p11)->turn_off();
            id(p11).publish_state(false);
            }
          return value;
        on_read: |
          return id(p11)->state ? 1 : 0;
          // Within lambda, get the switch state and conditionally do something
          if (id(p11).state) {
           // Switch is ON, do something here
          id(p11).publish_state(true);
          } else {
           // Switch is OFF, do something else here
          id(p11).publish_state(false);
          }
      ########
      ##########
      - start_address: 21 # in this example we map register 21 to a switch
        number: 1
        on_write: |
          if(value){
            id(p12)->turn_on();
            id(p12).publish_state(true);
            }
          else
          {
            id(p12)->turn_off();
            id(p12).publish_state(false);
            }
          return value;
        on_read: |
          return id(p12)->state ? 1 : 0;
          // Within lambda, get the switch state and conditionally do something
          if (id(p12).state) {
           // Switch is ON, do something here
          id(p12).publish_state(true);
          } else {
           // Switch is OFF, do something else here
          id(p12).publish_state(false);
          }
      ########
      ##########
      - start_address: 22 # in this example we map register 22 to a switch
        number: 1
        on_write: |
          if(value){
            id(p13)->turn_on();
            id(p13).publish_state(true);
            }
          else
          {
            id(p13)->turn_off();
            id(p13).publish_state(false);
            }
          return value;
        on_read: |
          return id(p13)->state ? 1 : 0;
          // Within lambda, get the switch state and conditionally do something
          if (id(p13).state) {
           // Switch is ON, do something here
          id(p13).publish_state(true);
          } else {
           // Switch is OFF, do something else here
          id(p13).publish_state(false);
          }
      ########
      ##########
      - start_address: 23 # in this example we map register 23 to a switch
        number: 1
        on_write: |
          if(value){
            id(p14)->turn_on();
            id(p14).publish_state(true);
            }
          else
          {
            id(p14)->turn_off();
            id(p14).publish_state(false);
            }
          return value;
        on_read: |
          return id(p14)->state ? 1 : 0;
          // Within lambda, get the switch state and conditionally do something
          if (id(p14).state) {
           // Switch is ON, do something here
          id(p14).publish_state(true);
          } else {
           // Switch is OFF, do something else here
          id(p14).publish_state(false);
          }
      ########
      ##########
      - start_address: 24 # in this example we map register 24 to a switch
        number: 1
        on_write: |
          if(value){
            id(p15)->turn_on();
            id(p15).publish_state(true);
            }
          else
          {
            id(p15)->turn_off();
            id(p15).publish_state(false);
            }
          return value;
        on_read: |
          return id(p15)->state ? 1 : 0;
          // Within lambda, get the switch state and conditionally do something
          if (id(p15).state) {
           // Switch is ON, do something here
          id(p15).publish_state(true);
          } else {
           // Switch is OFF, do something else here
          id(p15).publish_state(false);
          }
      ########
      ##########
      - start_address: 25 # in this example we map register 25 to a switch
        number: 1
        on_write: |
          if(value){
            id(p16)->turn_on();
            id(p16).publish_state(true);
            }
          else
          {
            id(p16)->turn_off();
            id(p16).publish_state(false);
            }
          return value;
        on_read: |
          return id(p16)->state ? 1 : 0;
          // Within lambda, get the switch state and conditionally do something
          if (id(p16).state) {
           // Switch is ON, do something here
          id(p16).publish_state(true);
          } else {
           // Switch is OFF, do something else here
          id(p16).publish_state(false);
          }
      ########
      ##########
      - start_address: 26 # in this example we map register 26 to a switch
        number: 1
        on_write: |
          if(value){
            id(p17)->turn_on();
            id(p17).publish_state(true);
            }
          else
          {
            id(p17)->turn_off();
            id(p17).publish_state(false);
            }
          return value;
        on_read: |
          return id(p17)->state ? 1 : 0;
          // Within lambda, get the switch state and conditionally do something
          if (id(p17).state) {
           // Switch is ON, do something here
          id(p17).publish_state(true);
          } else {
           // Switch is OFF, do something else here
          id(p17).publish_state(false);
          }
      ########

switch:
  - platform: gpio
    pin: 32
    name: ${name} Modbus Button 32
    id: testswitch
    on_turn_on:
    - logger.log: "Switch Turned On!"
    on_turn_off:
    - logger.log: "Switch Turned Off!"
  - platform: gpio
    name: ${name} U2-P00
    id: p0
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 0
      mode: OUTPUT
      inverted: true
  - platform: gpio
    name: ${name} U2-P01
    id: p1
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 1
      mode: OUTPUT
      inverted: true
  - platform: gpio
    name: ${name} U2-P02
    id: p2
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 2
      mode: OUTPUT
      inverted: true
  - platform: gpio
    name: ${name} U2-P03
    id: p3
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 3
      mode: OUTPUT
      inverted: true
  - platform: gpio
    name: ${name} U2-P04
    id: p4
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 4
      mode: OUTPUT
      inverted: true
  - platform: gpio
    name: ${name} U2-P05
    id: p5
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 5
      mode: OUTPUT
      inverted: true
  - platform: gpio
    name: ${name} U2-P06
    id: p6
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 6
      mode: OUTPUT
      inverted: true
  - platform: gpio
    name: ${name} U2-P07
    id: p7
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 7
      mode: OUTPUT
      inverted: true
  - platform: gpio
    name: ${name} U2-P10
    id: p10
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 8
      mode: OUTPUT
      inverted: true
  - platform: gpio
    name: ${name} U2-P11
    id: p11
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 9
      mode: OUTPUT
      inverted: true
  - platform: gpio
    name: ${name} U2-P12
    id: p12
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 10
      mode: OUTPUT
      inverted: true  
  - platform: gpio
    name: ${name} U2-P13
    id: p13
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 11
      mode: OUTPUT
      inverted: true   
  - platform: gpio
    name: ${name} U2-P14
    id: p14
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 12
      mode: OUTPUT
      inverted: true
  - platform: gpio
    name: ${name} U2-P15
    id: p15
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 13
      mode: OUTPUT
      inverted: true
  - platform: gpio
    name: ${name} U2-P16
    id: p16
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 14
      mode: OUTPUT
      inverted: true
  - platform: gpio
    name: ${name} U2-P17
    id: p17
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 15
      mode: OUTPUT
      inverted: true

binary_sensor:
  - platform: gpio
    name: ${name} ETH32--IN0
    id: SW0
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 0
      mode: INPUT
      inverted: true
    filters:
      - delayed_on: 250ms      
    on_press:
      then:
        - switch.toggle: p0
  - platform: gpio
    name: ${name} ETH32--IN1
    id: SW1
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 1
      mode: INPUT
      inverted: true
    filters:
      - delayed_on: 250ms      
    on_press:
      then:
        - switch.toggle: p1
  - platform: gpio
    name: ${name} ETH32--IN2
    id: SW2
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 2
      mode: INPUT
      inverted: true
    filters:
      - delayed_on: 250ms      
    on_press:
      then:
        - switch.toggle: p2
  - platform: gpio
    name: ${name} ETH32--IN3
    id: SW3
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 3
      mode: INPUT
      inverted: true
    filters:
      - delayed_on: 250ms      
    on_press:
      then:
        - switch.toggle: p3
  - platform: gpio
    name: ${name} ETH32--IN4
    id: SW4
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 4
      mode: INPUT
      inverted: true
    filters:
      - delayed_on: 250ms      
    on_press:
      then:
        - switch.toggle: p4
  - platform: gpio
    name: ${name} ETH32--IN5
    id: SW5
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 5
      mode: INPUT
      inverted: true
    filters:
      - delayed_on: 250ms      
    on_press:
      then:
        - switch.toggle: p5
  - platform: gpio
    name: ${name} ETH32--IN6
    id: SW6
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 6
      mode: INPUT
      inverted: true
    filters:
      - delayed_on: 250ms      
    on_press:
      then:
        - switch.toggle: p6
  - platform: gpio
    name: ${name} ETH32--IN7
    id: SW7
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 7
      mode: INPUT
      inverted: true
    filters:
      - delayed_on: 250ms      
    on_press:
      then:
        - switch.toggle: p7
  - platform: gpio
    name: ${name} ETH32--IN10
    id: SW8
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 8
      mode: INPUT
      inverted: true
    filters:
      - delayed_on: 250ms      
    on_press:
      then:
        - switch.toggle: p10
  - platform: gpio
    name: ${name} ETH32--IN11
    id: SW9
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 9
      mode: INPUT
      inverted: true
    filters:
      - delayed_on: 250ms      
    on_press:
      then:
        - switch.toggle: p11
  - platform: gpio
    name: ${name} ETH32--IN12
    id: SW10
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 10
      mode: INPUT
      inverted: true
    filters:
      - delayed_on: 250ms      
    on_press:
      then:
        - switch.toggle: p12
  - platform: gpio
    name: ${name} ETH32--IN13
    id: SW11
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 11
      mode: INPUT
      inverted: true
    filters:
      - delayed_on: 250ms      
    on_press:
      then:
        - switch.toggle: p13
  - platform: gpio
    name: ${name} ETH32--IN14
    id: SW12
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 12
      mode: INPUT
      inverted: true
    filters:
      - delayed_on: 250ms      
    on_press:
      then:
        - switch.toggle: p14
  - platform: gpio
    name: ${name} ETH32--IN15
    id: SW13
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 13
      mode: INPUT
      inverted: true
    filters:
      - delayed_on: 250ms      
    on_press:
      then:
        - switch.toggle: p15
  - platform: gpio
    name: ${name} ETH32--IN16
    id: SW14
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 14
      mode: INPUT
      inverted: true
    filters:
      - delayed_on: 250ms      
    on_press:
      then:
        - switch.toggle: p16
  - platform: gpio
    name: ${name} ETH32--IN17
    id: SW15
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 15
      mode: INPUT
      inverted: true
    filters:
      - delayed_on: 250ms      
    on_press:
      then:
        - switch.toggle: p17
